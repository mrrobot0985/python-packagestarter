name: CI for Develop Branch

on:
  push:
    branches:
      - develop
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - develop
  workflow_dispatch:

jobs:
  develop_workflow:
    name: Show Workflow Details
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
          
      - name: Print Workflow Details
        run: |
          echo "Workflow Name: ${{ github.workflow }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Commit Hash: ${{ github.sha }}"

  determine_version:
    name: Determine Future Version
    needs: develop_workflow
    runs-on: ubuntu-latest
    env:
      LATEST_TAG: ""
      BRANCH_PREFIX: ""
      FUTURE_VERSION: ""
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Determine Latest Tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag | sort -V | tail -n1)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          
      - name: Determine Branch Prefix
        run: |
          BRANCH_PREFIX=$(echo "${{ github.event.pull_request.head.ref }}" | cut -d'/' -f1)
          echo "BRANCH_PREFIX=$BRANCH_PREFIX" >> $GITHUB_ENV

      - run: mkdir -p artifacts/${{ github.head_ref }}

      - name: Determine Future Version
        run: |
          case "${BRANCH_PREFIX}" in
            feature)
              MAJOR=$(echo "${LATEST_TAG}" | cut -d. -f1 | cut -dv -f2)
              MINOR=$(echo "${LATEST_TAG}" | cut -d. -f2)
              PATCH=$((MINOR + 1))
              ;;
            bugfix|hotfix)
              MAJOR=$(echo "${LATEST_TAG}" | cut -d. -f1 | cut -dv -f2)
              MINOR=$(echo "${LATEST_TAG}" | cut -d. -f2)
              PATCH=$(echo "${LATEST_TAG}" | cut -d. -f3 | cut -dp -f2)
              PATCH=$((PATCH + 1))
              ;;
            *)
              echo "Unknown branch prefix"
              exit 1
              ;;
          esac
          FUTURE_VERSION="v${MAJOR}.${MINOR}.${PATCH}"

          echo "$FUTURE_VERSION" > artifacts/${{ github.head_ref }}/version.txt
          cat artifacts/${{ github.head_ref }}/version.txt
          echo "$FUTURE_VERSION:${BRANCH_PREFIX}${{ github.run_number }}" > artifacts/${{ github.head_ref }}/build.txt
          cat artifacts/${{ github.head_ref }}/build.txt

      - name: Upload Build Version File
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: artifacts/${{ github.head_ref }}/
          retention-days: 1
          overwrite: true

      # - name: Determine Future Version
      #   run: |
      #     BRANCH_PREFIX="${{ github.head_ref }}"
      #     # Fetch the latest tag across all branches
      #     LATEST_TAG=$(git tag | sort -V | tail -n1)
      #     # Assuming the tag is in the format vMAJOR.MINOR.PATCH
      #     MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | cut -dv -f2)
      #     MINOR=$(echo $LATEST_TAG | cut -d. -f2)
      #     PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          
      #     if [[ "$BRANCH_PREFIX" == feature/* ]]; then
      #     # Bump minor
      #     FUTURE_TAG="v$MAJOR.$(($MINOR+1)).${{ github.run_number }}"
      #     elif [[ "$BRANCH_PREFIX" == bugfix/* || "$BRANCH_PREFIX" == hotfix/* ]]; then
      #     # Bump patch
      #     FUTURE_TAG="v$MAJOR.$MINOR.$(($PATCH+${{ github.run_number }}))"
      #     fi
      #     # Set Github ENV
      #     echo "FUTURE_TAG=$FUTURE_TAG" >> $GITHUB_ENV
      #     echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          
      #     echo "$FUTURE_TAG" > artifacts/${{ github.head_ref }}/version.txt
      #     echo "$FUTURE_TAG"

      # - name: Install dependencies
      #   run: |
      #     make install

      # - name: Run tests
      #   run: |
      #     make testxt

      # - name: Lint code
      #   run: |
      #     make lint

  # develop_pull_request_job:
  #   needs: develop_workflow
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # Important: fetch all history for all tags and branches
  #         token: ${{ secrets.PAT_TOKEN }}
          
  #     - name: Fetch all tags
  #       run: git fetch --tags

  #     - name: Set Version
  #       run: |
  #         BRANCH_PREFIX="${{ github.head_ref }}"
  #         # Fetch the latest tag across all branches
  #         LATEST_TAG=$(git tag | sort -V | tail -n1)
  #         # Assuming the tag is in the format vMAJOR.MINOR.PATCH
  #         MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | cut -dv -f2)
  #         MINOR=$(echo $LATEST_TAG | cut -d. -f2)
  #         PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          
  #         if [[ "$BRANCH_PREFIX" == feature/* ]]; then
  #         # Bump minor
  #         NEW_VERSION="v$MAJOR.$(($MINOR+1)).0"
  #         elif [[ "$BRANCH_PREFIX" == bugfix/* || "$BRANCH_PREFIX" == hotfix/* ]]; then
  #         # Bump patch
  #         NEW_VERSION="v$MAJOR.$MINOR.$(($PATCH+1))"
  #         fi
  #         # Set NEW_VERSION as an environment variable for the job
  #         echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

  #     - name: Pull Request Job Execution
  #       run: |
  #         echo "Running additional checks for PR to develop branch"
  #         echo "PR Title: ${{ github.event.pull_request.title }}"
  #         echo "PR Body: ${{ github.event.pull_request.body }}"
  #         echo "PR Version: $NEW_VERSION"
          
  #     - name: Install dependencies
  #       run: |
  #         make install

  #     - name: Run tests
  #       run: |
  #         make test

  #     - name: Set User Config
  #       run: |
  #         git config --global user.email "${{ github.actor }}@users.noreply.github.com"
  #         git config --global user.name "${{ github.actor }}"

  #     - name: Build package
  #       run: |
  #         make build

  #     - name: Perform security scan
  #       run: |
  #         make security-scan

  #     - name: Code Quality Check
  #       run: |
  #         make quality-check

  #     - name: Create and Push Test Release Branch
  #       run: |
  #         # Fetch all branch data, important if you're using a branch other than the default branch
  #         git fetch --all
          
  #         # Checkout to the base branch (e.g., 'main' or 'develop')
  #         git checkout ${{ github.base_ref }}  # Or manually specify your base branch, like 'main'
          
  #         # Create a new release branch from here
  #         git checkout -b release/$NEW_VERSION-${{ github.sha }}
          
  #         # Push the new release branch to the repository
  #         git push origin release/$NEW_VERSION-${{ github.sha }}

  # develop_pull_request_accepted:
  #   runs-on: ubuntu-latest
  #   needs: develop_pull_request_job
  #   if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # Important: fetch all history for all tags and branches

  #     - name: Fetch all tags
  #       run: git fetch --tags

  #     - name: Set Version
  #       run: |
  #         BRANCH_PREFIX="${{ github.head_ref }}"
  #         # Fetch the latest tag across all branches
  #         LATEST_TAG=$(git tag | sort -V | tail -n1)
  #         # Assuming the tag is in the format vMAJOR.MINOR.PATCH
  #         MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | cut -dv -f2)
  #         MINOR=$(echo $LATEST_TAG | cut -d. -f2)
  #         PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          
  #         if [[ "$BRANCH_PREFIX" == feature/* ]]; then
  #         # Bump minor
  #         NEW_VERSION="v$MAJOR.$(($MINOR+1)).0"
  #         elif [[ "$BRANCH_PREFIX" == bugfix/* || "$BRANCH_PREFIX" == hotfix/* ]]; then
  #         # Bump patch
  #         NEW_VERSION="v$MAJOR.$MINOR.$(($PATCH+1))-build${{ github.run_number }}"
  #         fi
  #         echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

  #     - name: Handle Merged Pull Request
  #       run: |
  #         echo "Pull Request was merged successfully."
  #         echo "Merged PR Title: ${{ github.event.pull_request.title }}"
  #         echo "New version: $NEW_VERSION"

  #     - name: Install dependencies
  #       run: |
  #         make install

  #     - name: Set User Config
  #       run: |
  #         git config --global user.email "${{ github.actor }}@users.noreply.github.com"
  #         git config --global user.name "${{ github.actor }}"

  #     - name: Build package
  #       run: |
  #         make build

  #     - name: Perform security scan
  #       run: |
  #         make security-scan

  #     - name: Code Quality Check
  #       run: |
  #         make quality-check

  #     - name: Create and Push Release Branch
  #       run: |
  #         # Create a new branch from the current state of develop
  #         git checkout -b release/$NEW_VERSION ${{ github.ref }}
  #         # Push the new release branch to the repository
  #         git push origin release/$NEW_VERSION

  # develop_pull_request_declined:
  #   runs-on: ubuntu-latest
  #   needs: develop_pull_request_job
  #   if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == false }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # Important: fetch all history for all tags and branches

  #     - name: Fetch all tags
  #       run: git fetch --tags

  #     - name: Get Version
  #       run: |
  #         BRANCH_PREFIX="${{ github.head_ref }}"
  #         # Fetch the latest tag across all branches
  #         LATEST_TAG=$(git tag | sort -V | tail -n1) >> $GITHUB_ENV

  #     - name: Handle Declined Pull Request
  #       run: |
  #         LATEST_TAG=$(git tag | sort -V | tail -n1)
  #         echo "Pull Request was closed without merging."
  #         echo "Declined PR Title: ${{ github.event.pull_request.title }}"
  #         echo "Sticking with version: $LATEST_TAG"