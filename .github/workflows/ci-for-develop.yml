name: CI for Develop Branch

on:
  push:
    branches:
      - develop
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - develop

jobs:
  develop_workflow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Print Workflow Details
        run: |
          echo "Workflow Name: ${{ github.workflow }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Commit Hash: ${{ github.sha }}"

      - name: Install dependencies
        run: |
          make install

      - name: Run tests
        run: |
          make test

      - name: Lint code
        run: |
          make lint

  develop_pull_request_job:
    needs: develop_workflow
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important: fetch all history for all tags and branches

      - name: Fetch all tags
        run: git fetch --tags

      - name: Bump Version
        run: |
          BRANCH_PREFIX="${{ github.head_ref }}"
          # Fetch the latest tag across all branches
          LATEST_TAG=$(git tag | sort -V | tail -n1)
          # Assuming the tag is in the format vMAJOR.MINOR.PATCH
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | cut -dv -f2)
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          
          if [[ "$BRANCH_PREFIX" == feature/* ]]; then
          # Bump minor
          NEW_VERSION="v$MAJOR.$(($MINOR+1)).0"
          elif [[ "$BRANCH_PREFIX" == bugfix/* || "$BRANCH_PREFIX" == hotfix/* ]]; then
          # Bump patch
          NEW_VERSION="v$MAJOR.$MINOR.$(($PATCH+1))"
          fi

      - name: Pull Request Job Execution
        run: |
          echo "Running additional checks for PR to develop branch"
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Body: ${{ github.event.pull_request.body }}"
          echo "PR Version: $NEW_VERSION"
          
      - name: Install dependencies
        run: |
          make install

      - name: Run tests
        run: |
          make test

      - name: Set User Config
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Build package
        run: |
          make build

      - name: Perform security scan
        run: |
          make security-scan

      - name: Code Quality Check
        run: |
          make quality-check

  develop_pull_request_accepted:
    runs-on: ubuntu-latest
    needs: develop_pull_request_job
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important: fetch all history for all tags and branches

      - name: Fetch all tags
        run: git fetch --tags

      - name: Bump Version
        run: |
          BRANCH_PREFIX="${{ github.head_ref }}"
          # Fetch the latest tag across all branches
          LATEST_TAG=$(git tag | sort -V | tail -n1)
          # Assuming the tag is in the format vMAJOR.MINOR.PATCH
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | cut -dv -f2)
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          
          if [[ "$BRANCH_PREFIX" == feature/* ]]; then
          # Bump minor
          NEW_VERSION="v$MAJOR.$(($MINOR+1)).0"
          elif [[ "$BRANCH_PREFIX" == bugfix/* || "$BRANCH_PREFIX" == hotfix/* ]]; then
          # Bump patch
          NEW_VERSION="v$MAJOR.$MINOR.$(($PATCH+1))"
          fi
        
      - name: Handle Merged Pull Request
        run: |
          echo "Pull Request was merged successfully."
          echo "Merged PR Title: ${{ github.event.pull_request.title }}"
          echo "New version: $NEW_VERSION"

      - name: Install dependencies
        run: |
          make install

      - name: Set User Config
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Build package
        run: |
          make build

      - name: Perform security scan
        run: |
          make security-scan

      - name: Code Quality Check
        run: |
          make quality-check
      
  develop_pull_request_declined:
    runs-on: ubuntu-latest
    needs: develop_pull_request_job
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == false }}
    steps:
      - uses: actions/checkout@v4
      - name: Handle Declined Pull Request
        run: |
          LATEST_TAG=$(git tag | sort -V | tail -n1)
          echo "Pull Request was closed without merging."
          echo "Declined PR Title: ${{ github.event.pull_request.title }}"
          echo "Sticking with version: $LATEST_TAG"